# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Deploy Lambda

on:
  push:
    branches: 
    - master
  pull_request:
    branches: 
    - master

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  terraform-deploy:

    runs-on: ubuntu-latest
    environment: terraform-aws
    needs: lint

    steps:

    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Create and commit lambda.py archive
      run: |
        zip function.zip lambda.py
        git config --global user.name 'PhilRanzato'
        git config --global user.email "$EMAIL"
        git add .
        git commit -m "Automated packaging of lambda.py"
        git push
      env:
        EMAIL: '${{ secrets.EMAIL }}'

    - name: Clone Terraform repository (https://github.com/PhilRanzato/terraform-lambda-aws)
      run: |
        git clone https://github.com/PhilRanzato/terraform-lambda-aws

    - name: Move Lambda zip
      run: |
        mv function.zip terraform-lambda-aws/

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

    # Generates an execution plan for Terraform
    - name: Terraform Plan for Kinesis
      run: terraform plan -var-file=testing.tfvars -target=module.kinesis_stream -out kinesis_plan
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply for Kinesis
      if: github.ref == 'refs/heads/master' || github.event_name == 'pull_request'
      run: terraform apply "kinesis_plan"
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

    # Generates an execution plan for Terraform
    - name: Terraform Plan for Lambda
      run: terraform plan -var-file=testing.tfvars -out lambda_function
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply for Lambda
      if: github.ref == 'refs/heads/master' || github.event_name == 'pull_request'
      run: terraform apply "lambda_function"
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

  kinesis-test:

    runs-on: ubuntu-18.04
    environment: terraform-aws
    needs: terraform-deploy

    steps:
    - uses: actions/checkout@v2
      with:
        repository: PhilRanzato/kinesis-application
        ref: master
    
    - name: Install Kinesis Agent
      run: |
        sudo apt-get purge openjdk-\* icedtea-\* icedtea6-\*
        sudo apt-get -y install openjdk-8-jdk git
        git clone https://github.com/awslabs/amazon-kinesis-agent.git
        cd amazon-kinesis-agent && sudo ./setup --install && cd ..

    - name: Start Kinesis Agent
      run: sudo service aws-kinesis-agent start

    - name: Configure Kinesis Agent
      run: |
        echo "$KINESISAGENTJSON" agent.json
        sudo rm -rf /etc/aws-kinesis/agent.json
        sudo mv agent.json /etc/aws-kinesis/
      env:
        KINESISAGENTJSON: '${{ secrets.KINESISAGENTJSON }}'

    - name: Restart Kinesis Agent to take the configuration
      run: sudo service aws-kinesis-agent restart

    - name: Wait until Kinesis Agent is fully up and running
      run: sleep 60

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Run script
      run: python kinesis-app.py

    - name: Wait until Kinesis Agent pushes all records
      run: sleep 120

    - name: Check logs
      run: tail /var/log/aws-kinesis-agent/aws-kinesis-agent.log
