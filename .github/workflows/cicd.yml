# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Deploy Lambda

on:
  push:
    branches: 
    - master
  pull_request:
    branches: 
    - master

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  terraform-deploy:

    runs-on: ubuntu-latest
    environment: terraform-aws
    needs: lint

    steps:

    - uses: actions/checkout@v2
    - name: Zip Lambda
      run: |
        zip function.zip lambda.py

    - name: Clone Terraform repository (https://github.com/PhilRanzato/terraform-lambda-aws)
      run: |
        git clone https://github.com/PhilRanzato/terraform-lambda-aws

    - name: Move Lambda zip
      run: |
        mv function.zip terraform-lambda-aws/

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file=testing.tfvars -out lambda_plan
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' || github.event_name == 'pull_request'
      run: terraform apply "lambda_plan"
      working-directory: terraform-lambda-aws
      env:
        TF_VAR_access_key: '${{ secrets.TF_VAR_ACCESS_KEY }}'
        TF_VAR_secret_key: '${{ secrets.TF_VAR_SECRET_KEY }}'
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'
